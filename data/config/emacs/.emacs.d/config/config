(setq-default indent-tabs-mode nil)
(set-face-attribute 'default nil :height 150)
(setq-default fill-column 80)

;; isearch wraps over new lines
(setq isearch-lax-whitespace t)
(setq isearch-regexp-lax-whitespace t)
(setq search-whitespace-regexp "[ \t\r\n]+")

;; tex
(with-eval-after-load 'tex
  (add-to-list 'TeX-command-list
               '("Clean" "make clean" TeX-run-command t t :help "make clean") t)
  (add-to-list 'TeX-command-list
               '("Make" "make" TeX-run-command t t :help "make") t)
  (add-to-list 'TeX-view-program-list
               '("okular" "/usr/bin/okular %o"))
  (setcdr (assq 'output-pdf TeX-view-program-selection) '("okular"))
  )

;; helm
(with-eval-after-load 'helm
  (setq helm-autoresize-max-height 50)
;;  (setq helm-autoresize-min-height 20)
  (helm-autoresize-mode 0)
  (setq helm-case-fold-search t)
  )

;; fix dead_tilde issue due to fcitx
(require 'iso-transl)

;; gtags
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(with-eval-after-load 'cc-mode
  (add-to-list 'company-backends 'company-gtags))

;; cc-mode
;; (require 'cc-mode)

;; company
;; (require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(with-eval-after-load 'cc-mode
  (define-key c++-mode-map  [(tab)] 'company-complete))

;; irony
(add-hook 'c++-mode-hook 'irony-mode)
;; removed, slows down ff-find-other-file
; (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))

;; flycheck-irony
(with-eval-after-load 'flycheck
  (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

;; company-irony
(with-eval-after-load 'company
  (add-to-list 'company-backends 'company-irony))



;; ;; semantic
;; (require 'cc-mode)
;; (require 'semantic)

;; (global-semanticdb-minor-mode 1)
;; (global-semantic-idle-scheduler-mode 1)

;; (semantic-mode 1)

;; (require 'company)
;; (add-hook 'after-init-hook 'global-company-mode)

;; (setq company-backends (delete 'company-semantic company-backends))
;; (define-key c-mode-map  [(tab)] 'company-complete)
;; (define-key c++-mode-map  [(tab)] 'company-complete)
;; (setq company-clang-executable "~/scioncpp/build-tools/clang+llvm-6.0.0-x86_64-linux-gnu-ubuntu-16.04/bin/clang++")

;; (require 'company-c-headers)
;; (add-to-list 'company-backends 'company-c-headers)
;; (add-to-list 'company-c-headers-path-system "~/scioncpp/build-tools/clang+llvm-6.0.0-x86_64-linux-gnu-ubuntu-16.04/include/c++/v1")

;; (require 'cc-mode)
;; (require 'company)
;; (add-hook 'after-init-hook 'global-company-mode)
;; (define-key c-mode-map  [(tab)] 'company-complete)
;; (define-key c++-mode-map  [(tab)] 'company-complete)

;; ; irony
;; (add-hook 'c++-mode-hook 'irony-mode)

;; ; (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
;; (eval-after-load 'flycheck
;;   '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
;; (eval-after-load 'company
;;   '(add-to-list 'company-backends 'company-irony))
